Hello World
The easiest way to get started with React is to use this Hello World example code on CodePen. 
You don't need to install anything ; you can just open it in another tab and follow along as we go through examples. 
If you'd rather use a local development environment, check out the Installation page.
The smallest React example looks like this :
ReactDOM .render ( <h1> Hello , world ! </h1> , document .getElementById ( ' root ' ) ) ;
It renders a header saying " Hello World " on the page.
The next few sections will gradually introduce you to using React. 
We will examine the building blocks of React apps : elements and components. 
Once you master them, you can create complex apps from small reusable pieces.
A Note on JavaScript
React is a JavaScript library, and so it assumes you have a basic understanding of the JavaScript language. 
If you don't feel very confident, we recommend refreshing your JavaScript knowledge so you can follow along more easily.
We also use some of the ES6 syntax in the examples. 
We try to use it sparingly because it's still relatively new, but we encourage you to get familiar with arrow functions, classes, template literals, let, and const statements. 
You can use Babel REPL to check what ES6 code compiles to.
Introducing JSX
Consider this variable declaration :
const element = <h1> Hello, world ! </h1> ;
This funny tag syntax is neither a string nor HTML.
It is called JSX, and it is a syntax extension to JavaScript. 
We recommend using it with React to describe what the UI should look like. 
JSX may remind you of a template language, but it comes with the full power of JavaScript.
JSX produces React " elements ". 
We will explore rendering them to the DOM in the next section. 
Below, you can find the basics of JSX necessary to get you started.
Embedding Expressions in JSX
You can embed any JavaScript expression in JSX by wrapping it in curly braces.
For example, 2 + 2, user.firstName, and formatName(user) are all valid expressions:
function formatName ( user ) { return user .firstName + ' ' + user .lastName ; }
const user = { firstName : ' Harper ' , lastName : ' Perez ' } ;
const element = ( <h1> Hello , { formatName ( user ) } ! </h1> ) ;
ReactDOM .render ( element , document .getElementById ( ' root ' ) ) ;
Try it on CodePen.
We split JSX over multiple lines for readability. 
While it isn't required, when doing this, we also recommend wrapping it in parentheses to avoid the pitfalls of automatic semicolon insertion.
JSX is an Expression Too
After compilation, JSX expressions become regular JavaScript objects.
This means that you can use JSX inside of if statements and for loops, assign it to variables, accept it as arguments, and return it from functions :
function getGreeting ( user ) { if ( user ) { return <h1> Hello , { formatName ( user ) } ! </h1> ; } return <h1> Hello , Stranger . </h1> ; }
Specifying Attributes with JSX
You may use quotes to specify string literals as attributes:
const element = <div tabIndex = " 0 " > </div> ;
You may also use curly braces to embed a JavaScript expression in an attribute :
const element = <img src = { user .avatarUrl } > </img> ;
Don't put quotes around curly braces when embedding a JavaScript expression in an attribute. 
Otherwise JSX will treat the attribute as a string literal rather than an expression. 
You should either use quotes ( for string values ) or curly braces ( for expressions ), but not both in the same attribute.
Specifying Children with JSX
If a tag is empty, you may close it immediately with />, like XML :
const element = <img src = { user .avatarUrl } /> ;
JSX tags may contain children:
const element = ( <div> <h1> Hello ! </h1> <h2> Good to see you here. </h2> </div> ) ;
Caveat :
Since JSX is closer to JavaScript than HTML, React DOM uses camelCase property naming convention instead of HTML attribute names.
For example, class becomes className in JSX, and tabindex becomes tabIndex.
JSX Prevents Injection Attacks
It is safe to embed user input in JSX :
const title = response .potentiallyMaliciousInput ;
// This is safe:
const element = <h1> { title } </h1> ;
By default, React DOM escapes any values embedded in JSX before rendering them. 
Thus it ensures that you can never inject anything that's not explicitly written in your application. 
Everything is converted to a string before being rendered. 
This helps prevent XSS ( cross-site-scripting ) attacks.
JSX Represents Objects
Babel compiles JSX down to React .createElement ( ) calls.
These two examples are identical:
const element = ( <h1 className = " greeting " > Hello, world! </h1> ) ;
const element = React .createElement ( ' h1 ' , { className : ' greeting ' } , ' Hello, world! ' ) ;
React .createElement ( ) performs a few checks to help you write bug-free code but essentially it creates an object like this :